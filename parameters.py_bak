import json
import os
from typing import Any, Dict

class Parameter:
    """A container for a parameter value with a default"""
    def __init__(self, default_value: Any):
        self.default_value = default_value
        self.value = default_value

class Parameters:
    """Global parameter management system"""
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(Parameters, cls).__new__(cls)
            cls._instance._initialize()
        return cls._instance

    def _initialize(self) -> None:
        self._filename = 'parameters.json'
        self._params: Dict[str, Parameter] = {}
        self._loaded_values = {}
        self.load()

    def __getattr__(self, name: str) -> Any:
        """Get parameter value or None if it doesn't exist"""
        if name in self._params:
            return self._params[name].value
        return None

    def __setattr__(self, name: str, value: Any) -> None:
        """Set parameter value or create new parameter"""
        # Ignore private attributes
        if name.startswith('_'):
            super().__setattr__(name, value)
            return

        # Creating new parameter
        if isinstance(value, Parameter):
            if name in self._loaded_values:
                value.value = self._loaded_values[name]
            self._params[name] = value
            return

        # Updating existing parameter
        if name not in self._params:
            raise TypeError(f"Parameter '{name}' must be initialized with Parameter(default_value)")
        self._params[name].value = value

    def load(self) -> None:
        """Load parameter values from file"""
        if os.path.exists(self._filename):
            try:
                with open(self._filename, 'r') as f:
                    self._loaded_values = json.load(f)
                    # Update existing parameters with loaded values
                    for name, value in self._loaded_values.items():
                        if name in self._params:
                            print(f'default value: {value} (type: {type(value)})')
                            self._params[name].value = value
                            
            except json.JSONDecodeError:
                print(f"Error loading parameters from {self._filename}")

    def save(self) -> None:
        """Save all parameter values to file"""
        save_dict = {
            name: param.value 
            for name, param in self._params.items()
        }
        print(f"Saving parameters: {save_dict}")
        try:
            with open(self._filename, 'w') as f:
                json.dump(save_dict, f, indent=4)
        except Exception as e:
            print(f"Error saving parameters to {self._filename}: {e}")

# Global instance
parameters = Parameters()

if __name__ == '__main__':
    # Test parameter creation
    parameters.test = Parameter(default_value=42)
    print(f"Initial value: {parameters.test}")  # 42 or loaded value

    # Test value update
    parameters.test = 100
    print(f"Updated value: {parameters.test}")  # 100

    # Save to file
    parameters.save()
    print("Parameters saved to file")

    # Reset parameter to simulate new session
    parameters.test = Parameter(default_value=42)
    print(f"Value after reset: {parameters.test}")  # Should be 100 from file

    # Test error on uninitialized parameter
    try:
        parameters.unknown = 50  # Should raise TypeError
    except TypeError as e:
        print(f"Error caught: {e}")

    # Test loading non-existent parameter
    print(f"Non-existent parameter: {parameters.nonexistent}")  # Should be None

    # Test multiple parameters
    parameters.string_param = Parameter(default_value="hello")
    parameters.list_param = Parameter(default_value=[1, 2, 3])
    parameters.dict_param = Parameter(default_value={"a": 1, "b": 2})

    print("\nAll parameters before save:")
    print(f"test: {parameters.test}")
    print(f"string_param: {parameters.string_param}")
    print(f"list_param: {parameters.list_param}")
    print(f"dict_param: {parameters.dict_param}")

    parameters.save()
    print("\nParameters saved to file")

    # Create new Parameters instance (should load saved values)
    new_parameters = Parameters()
    print("\nLoaded parameters from new instance:")
    print(f"test: {new_parameters.test}")
    print(f"string_param: {new_parameters.string_param}")
    print(f"list_param: {new_parameters.list_param}")
    print(f"dict_param: {new_parameters.dict_param}")
